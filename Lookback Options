  
#==================================Import the relevant packages=============================#
import numpy as np
from scipy.stats import norm
#===========================================================================================#
# Function to calculte the Analytic Floating-Stike Call Option Price
def analyticLookback(S0,T,r,sigma):
    a1 = (np.log(S0/S0)+((r+sigma**2*0.5)*T))/(sigma*np.sqrt(T))
    a2 = a1-(sigma*np.sqrt(T))
    a3 = a1-(2*r*np.sqrt(T)/sigma)
    Y1 = (-2*(r-sigma**2*0.5)*np.log(S0/S0))/(sigma**2)   
    c1 = S0*norm.cdf(a1) - (S0*(sigma**2/(2*r))*norm.cdf(-a1))
    c2 = S0*np.exp(-r*T)*(norm.cdf(a2)-(sigma**2/(2*r))*np.exp(Y1)*norm.cdf(-a3))
    c = c1 - c2
    return c
#===========================================================================================#
# Function to calculte the Monte Carlo Floating-Stike Option Price for Calls or Puts
def floatLookbackMC(opType,S0,T,r,sigma,I):
    M = 250
    dt = T / M
    df = np.exp(-r * dt)
    S = S0 * np.exp(np.cumsum((r - 0.5 * sigma ** 2) * dt
        + sigma * np.sqrt(dt) * np.random.standard_normal((M + 1, I)), axis=0))
    ST = S[-1]
    if opType == 'Call':
        K = np.amin(S, axis=0)
        payoff = np.maximum(ST-K, 0)
    if opType == 'Put':
        K = np.amax(S, axis=0)
        payoff = np.maximum(K-ST, 0)
    payoff = payoff.mean()    
    payoff = np.exp(-r*T) * payoff
    return payoff
#===========================================================================================#    
# Function to calculte the Monte Carlo Fixed-Stike Option Price for Calls or Puts    
def fixedLookbackMC(opType,S0,K,T,r,sigma,I):
    M = 250
    dt = T / M
    df = np.exp(-r * dt)
    S = S0 * np.exp(np.cumsum((r - 0.5 * sigma ** 2) * dt
        + sigma * np.sqrt(dt) * np.random.standard_normal((M + 1, I)), axis=0))
    if opType == 'Call':
        ST = np.amax(S, axis=0)
        payoff = np.maximum(ST-K, 0)
    if opType == 'Put':
        ST = np.amin(S, axis=0)
        payoff = np.maximum(K-ST, 0)
    payoff = payoff.mean()    
    payoff = np.exp(-r*T) * payoff
    return payoff
#===========================================================================================#
# Function to calculte the Binomial Tree Floating-Stike Option Price for Calls or Puts
def floatLookbackBIN(opType,S0,T,r,sigma,M):
    dt = T/M # time length of steps
    u = np.exp(sigma*np.sqrt(dt))
    d = 1/u
    p = (np.exp(r*dt)-d)/(u-d)
    mu = np.arange((M+1))
    mu = np.resize(mu,(M+1,M+1)) #sets upper triangular matrix of number of up moves
    md = np.transpose(mu) #sets upper triangular matrix of number of down moves
    mu = u**(mu-md) #sets gross returns of up moves (upper triangular)
    md = d**md #sets gross returns o fdown moves (upper triangular)
    S = S0*mu*md #upper triangular matrix of asset prices (recombining)
    S = np.triu(S, k=0)
    S = np.around(S, 8)
    optima = np.zeros((M+1,M+1), dtype=object) # maximum(minimum) for Put(Call)
    optima[0,0] = [S0]
    # determine the minimum of paths progressively along the tree
    if opType == 'Call':
        for j in range(1, M+1):
            optima[0,j] = [S0] # The minimum along the topmost path will always be S0
            # items between the first and last elements of each column inherit from two parents
            for i in range(1,j): 
                parent1 = optima[i,j-1] # minimum values inherted from 1st parent
                parent2 = optima[i-1,j-1] # ominimum values inherted from 2nd parent
                St = S[i,j]
                n_min = []
                for k in range(len(parent1)):
                    if parent1[k] <= St:
                        n_min.append(parent1[k])
                for k in range(len(parent2)):
                    if parent2[k] not in parent1: # to avoid double counting
                        if parent2[k] <= St:
                            n_min.append(parent2[k])
                if len(n_min)==0:
                    n_min.append(St)
                optima[i,j] = n_min
            St = S[j,j]
            optima[j,j] = [St]# The minimum along the bottom path will always be St
    # determine the maximum of paths progressively along the tree
    elif opType == 'Put':
        for j in range(1, M+1):
            St = S[0,j]
            optima[0,j] = [St] # The maximum along the topmost path will always be St
            # items between the first and last elements of each column inherit from two parents
            for i in range(1,j):
                parent1 = optima[i,j-1] # maximum values inherted from 1st parent
                parent2 = optima[i-1,j-1] # maximum values inherted from 2nd parent
                St = S[i,j]
                n_max = []
                for k in range(len(parent1)):
                    if parent1[k] >= St:
                        n_max.append(parent1[k])
                for k in range(len(parent2)):
                    if parent2[k] not in parent1:
                        if parent2[k] >= St:
                            n_max.append(parent2[k])
                if len(n_max)==0:
                    n_max.append(St)
                optima[i,j] = n_max
            optima[j,j] = [S0] # The maximum along the bottom path will always be S0
    # build the payoff tree
    payoff = np.zeros((M+1,M+1), dtype=object)
    terminal = optima[:,-1]
    n_terminal = np.zeros(len(terminal),dtype=object)
    for k in range(len(terminal)):
        termDict = {}
        ST = S[k,-1]
        for j in range(len(terminal[k])):
            if opType == 'Call':
                termDict[terminal[k][j]] = ST - terminal[k][j]
            if opType == 'Put':
                termDict[terminal[k][j]] = terminal[k][j] - ST
        # Build a dictionary for each node on the terminal column such that the optima 
        # values(max or min) are the keys while the payoffs corresponding each of the
        # optima values are the values
        n_terminal[k] = termDict
    payoff[:,-1] = n_terminal    
    # Backward induction
    for column in range(M-1, -1, -1):
        for node in range(0, column+1):
            nodeDict = {}
            for M in optima[node,column]:
                St = S[node,column]
                Stu = S[node, column+1]
                Std = S[node+1, column+1]
                if opType == 'Call':
                    up = payoff[node, column+1][M] # going up does not change the minimum
                    # if the value going down one move is less than the minimum, then it
                    # becomes the new minimum and its corresponding payoff is used
                    if Std < M: down = payoff[node+1, column+1][Std]
                    elif Std >= M: down = payoff[node+1,column+1][M]
                elif opType == 'Put':
                    down = payoff[node+1, column+1][M] # going down does not change the maximum
                    # if the value going up one move is greater than the maximum, then it
                    # becomes the new maximum and its corresponding payoff is used
                    if Stu >= M: up = payoff[node,column+1][Stu]
                    elif Stu < M: up = payoff[node, column+1][M]                    
                nodeDict[M] = np.exp(-r*dt) * (p*up + (1-p)*down)
            payoff[node,column] = nodeDict
    return payoff[0,0][S0]
#===========================================================================================#
# Function to calculte the Binomial Tree Fixed-Stike Option Price for Calls or Puts
def fixedLookbackBIN(opType,S0,K,T,r,sigma,M):
    dt = T/M # time length of steps
    u = np.exp(sigma*np.sqrt(dt))
    d = 1/u
    p = (np.exp(r*dt)-d)/(u-d)
    mu = np.arange((M+1))
    mu = np.resize(mu,(M+1,M+1)) #sets upper triangular matrix of number of up moves
    md = np.transpose(mu) #sets upper triangular matrix of number of down moves
    mu = u**(mu-md) #sets gross returns of up moves (upper triangular)
    md = d**md #sets gross returns o fdown moves (upper triangular)
    S = S0*mu*md #upper triangular matrix of asset prices (recombining)
    S = np.triu(S, k=0)
    S = np.around(S, 8)
    optima = np.zeros((M+1,M+1), dtype=object) # maximum(minimum) for Call(Put)
    optima[0,0] = [S0]
    # determine the maximum of paths progressively along the tree
    if opType == 'Call':
        for j in range(1, M+1):
            St = S[0,j]
            optima[0,j] = [St] # The maximum along the topmost path will always be St
            # items between the first and last elements of each column inherit from two parents
            for i in range(1,j):
                parent1 = optima[i,j-1] # maximum values inherted from 1st parent
                parent2 = optima[i-1,j-1] # maximum values inherted from 2nd parent
                St = S[i,j]
                n_max = []
                for k in range(len(parent1)):
                    if parent1[k] >= St:
                        n_max.append(parent1[k])
                for k in range(len(parent2)):
                    if parent2[k] not in parent1:
                        if parent2[k] >= St:
                            n_max.append(parent2[k])
                if len(n_max)==0:
                    n_max.append(St)
                optima[i,j] = n_max
            optima[j,j] = [S0]
    # determine the minimum of paths progressively along the tree
    elif opType == 'Put':
        for j in range(1, M+1):
            optima[0,j] = [S0] # The minimum along the topmost path will always be S0
            # items between the first and last elements of each column inherit from two parents
            for i in range(1,j): 
                parent1 = optima[i,j-1] # minimum values inherted from 1st parent
                parent2 = optima[i-1,j-1] # ominimum values inherted from 2nd parent
                St = S[i,j]
                n_min = []
                for k in range(len(parent1)):
                    if parent1[k] <= St:
                        n_min.append(parent1[k])
                for k in range(len(parent2)):
                    if parent2[k] not in parent1: # to avoid double counting
                        if parent2[k] <= St:
                            n_min.append(parent2[k])
                if len(n_min)==0:
                    n_min.append(St)
                optima[i,j] = n_min
            St = S[j,j]
            optima[j,j] = [St]# The minimum along the bottom path will always be St
    # build the payoff tree
    payoff = np.zeros((M+1,M+1), dtype=object)
    terminal = optima[:,-1]
    n_terminal = np.zeros(len(terminal),dtype=object)
    for k in range(len(terminal)):
        termDict = {}
        for j in range(len(terminal[k])):
            if opType == 'Call':
                termDict[terminal[k][j]] = terminal[k][j] - K
            if opType == 'Put':
                termDict[terminal[k][j]] = K - terminal[k][j]
        # Build a dictionary for each node on the terminal column such that the optima 
        # values(max or min) are the keys while the payoffs corresponding to each of the
        # optima entries are the values
        n_terminal[k] = termDict
    payoff[:,-1] = n_terminal    
    # Backward induction
    for column in range(M-1, -1, -1):
        for node in range(0, column+1):
            nodeDict = {}
            for M in optima[node,column]:
                St = S[node,column]
                Stu = S[node, column+1]
                Std = S[node+1, column+1]
                if opType == 'Call':
                    down = payoff[node+1, column+1][M] # going down does not change the maximum
                    # if the value going up one move is greater than the maximum, then it
                    # becomes the new maximum and its corresponding payoff is used
                    if Stu >= M: up = payoff[node,column+1][Stu]
                    elif Stu < M: up = payoff[node, column+1][M] 
                elif opType == 'Put':
                    up = payoff[node, column+1][M] # going up does not change the minimum
                    # if the value going down one move is less than the minimum, then it
                    # becomes the new minimum and its corresponding payoff is used
                    if Std < M: down = payoff[node+1, column+1][Std]
                    elif Std >= M: down = payoff[node+1,column+1][M]
                nodeDict[M] = np.exp(-r*dt) * (p*up + (1-p)*down)
            payoff[node,column] = nodeDict
    return payoff[0,0][S0]
#==========================================================================================#
